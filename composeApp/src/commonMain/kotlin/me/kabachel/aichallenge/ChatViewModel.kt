package me.kabachel.aichallenge

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import androidx.compose.runtime.mutableStateListOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.getValue
import androidx.compose.runtime.setValue
import kotlinx.coroutines.launch
import kotlinx.datetime.TimeZone
import kotlinx.datetime.toLocalDateTime
import kotlinx.serialization.json.Json
import kotlinx.serialization.decodeFromString
import kotlin.time.Clock
import kotlin.time.ExperimentalTime

data class ChatUiMessage(
    val role: String,
    val type: String? = null,
    val content: String,
    val language: String? = null,
    val timestamp: String? = null,
    val confidence: Double? = null
)

class ChatViewModel(
    private val api: ChatApi,
    private val apiKey: String
) : ViewModel() {

    val models = mapOf(
        "Qwen3 235B A22B Instruct 2507 FP8" to "gpt://b1gppgv3fk1p5vm1kq4f/qwen3-235b-a22b-fp8/latest",
        "GPT OSS 120B" to "gpt://b1gppgv3fk1p5vm1kq4f/gpt-oss-120b/latest",
        "YandexGPT 5.1 Pro" to "gpt://b1gppgv3fk1p5vm1kq4f/yandexgpt/rc"
    )

    val chatMessages = mutableStateListOf<ChatUiMessage>()
    var temperature by mutableStateOf(0.7)
    var selectedModel by mutableStateOf(models.values.first())

    private var interviewActive = false

    @OptIn(ExperimentalTime::class)
    fun sendMessage(userInput: String) {
        if (userInput.isBlank()) return
        chatMessages.add(ChatUiMessage(role = "user", type = "user", content = userInput))

        val normalizedInput = userInput.lowercase()
        if (listOf("–¥–∞", "–≥–æ—Ç–æ–≤", "–ø–æ–µ—Ö–∞–ª–∏", "–Ω–∞—á–∏–Ω–∞–π").any { it == normalizedInput }) {
            interviewActive = true
        } else if (listOf("–æ—Å—Ç–∞–Ω–æ–≤–∏", "–∑–∞–≤–µ—Ä—à–∏", "–ø—Ä–µ–∫—Ä–∞—Ç–∏", "—Ö–≤–∞—Ç–∏—Ç").any { normalizedInput.contains(it) }) {
            interviewActive = false
        }

        viewModelScope.launch {
            val request = ChatRequest(
                model = selectedModel,
                messages = buildList {
                    val systemPrompt = buildString {
                        appendLine("–¢—ã ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≤–µ—Å—Ç–∏ —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–∏–∞–ª–æ–≥–æ–≤.")
                        appendLine()
                        appendLine("üîπ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—Ä–æ—Å–∏—Ç –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ‚Äò–ø—Ä–æ–≤–µ–¥–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ‚Äô, ‚Äòinterview‚Äô, ‚Äò—Ö–æ—á—É –ø—Ä–æ–π—Ç–∏ –∏–Ω—Ç–µ—Ä–≤—å—é‚Äô), –¥–µ–π—Å—Ç–≤—É–π –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä –∏ —Å–ª–µ–¥—É–π —ç—Ç–æ–º—É –ø–ª–∞–Ω—É:")
                        appendLine("1. –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å ‚Äî –Ω–∞—á–Ω–∏ —Å –≤–æ–ø—Ä–æ—Å–∞, –Ω–∞ –∫–∞–∫—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø—Ä–æ–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ (–ø—Ä–µ–¥–ª–æ–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã: Frontend, Backend, Mobile, Data Science, DevOps).")
                        appendLine("2. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–≤–µ—Ç–∏–ª ‚Äò–¥–∞‚Äô, ‚Äò–≥–æ—Ç–æ–≤‚Äô, ‚Äò–ø–æ–µ—Ö–∞–ª–∏‚Äô), –Ω–µ –Ω–∞—á–∏–Ω–∞–π –∑–∞–Ω–æ–≤–æ –∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π –≤–≤–æ–¥–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ –ø–µ—Ä–≤–æ–º—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –≤–æ–ø—Ä–æ—Å—É.")
                        appendLine("3. –ó–∞–¥–∞–≤–∞–π 3‚Äì5 –≤–æ–ø—Ä–æ—Å–æ–≤ —Ä–∞–∑–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ (–æ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∫ —Å–ª–æ–∂–Ω–æ–º—É). –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç, –∫—Ä–∞—Ç–∫–æ –æ—Ü–µ–Ω–∏ –µ–≥–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É.")
                        appendLine("4. –ù–µ –∑–∞–≤–µ—Ä—à–∏ –∏–Ω—Ç–µ—Ä–≤—å—é, –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–ª –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã. –ü–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–¥–∞–π –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É.")
                        appendLine("5. –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã, –æ—Ü–µ–Ω–∏ —É—Ä–æ–≤–µ–Ω—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (Junior, Middle, Senior), –ø—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–∏–º–µ—Ä–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É –∏ –¥–∞–π —Å–æ–≤–µ—Ç.")
                        appendLine("6. –ó–∞–≤–µ—Ä—à–∏ —Ñ—Ä–∞–∑–æ–π ‚Äò–ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ‚Äô. –í—Å–µ –æ—Ç–≤–µ—Ç—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π –≤ –æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ JSON:")
                        appendLine("{" )
                        appendLine("  \"type\": \"String\",        // —Ç–µ–º–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏–ª–∏ —Ç–∏–ø (–Ω–∞–ø—Ä–∏–º–µ—Ä: chat, interview, feedback, question, travel, code)")
                        appendLine("  \"content\": \"String\",     // –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ (–≤–∫–ª—é—á–∞—è –≤–æ–ø—Ä–æ—Å—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ—Ä–≤—å—é)")
                        appendLine("  \"language\": \"String\",    // —è–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞")
                        appendLine("  \"confidence\": Number       // –æ—Ç 0 –¥–æ 1 —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å")
                        appendLine("}")
                        appendLine("–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –Ω–µ—Å–∫–æ–ª—å–∫–æ JSON-–æ–±—ä–µ–∫—Ç–æ–≤, —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω JSON —Å –∫–ª—é—á–æ–º content, –¥–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ –∏–Ω—Ç–µ—Ä–≤—å—é.")
                        appendLine()
                        appendLine("üîπ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∂–µ—Ç —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ ‚Äò–æ—Å—Ç–∞–Ω–æ–≤–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ‚Äô, ‚Äò—Ö–≤–∞—Ç–∏—Ç‚Äô, ‚Äò–ø—Ä–µ–∫—Ä–∞—Ç–∏‚Äô –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é ‚Äî –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∏ –ø—Ä–æ—Ü–µ—Å—Å, –≤—ã–¥–∞–π —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –∏ –¥–æ–±–∞–≤—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —á—Ç–æ –∏–Ω—Ç–µ—Ä–≤—å—é –±—ã–ª–æ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                        appendLine()
                        if (interviewActive) {
                            appendLine("‚öôÔ∏è –ò–Ω—Ç–µ—Ä–≤—å—é —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ. –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –≤–≤–æ–¥–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Å—Ä–∞–∑—É –ø—Ä–æ–¥–æ–ª–∂–∞–π —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.")
                            appendLine("–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–¥–∞–π —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å, –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞—à—å –≤—Å–µ 3‚Äì5.")
                        }
                    }
                    add(ChatMessage("system", systemPrompt))
                    chatMessages.forEach { add(ChatMessage(it.role, it.content)) }
                    add(ChatMessage("user", userInput))
                },
                temperature = temperature
            )
            val response = api.sendChatRequest(apiKey, request)
            val assistantText = response.choices?.firstOrNull()?.message?.content.orEmpty()
            val now = Clock.System.now()
            val local = now.toLocalDateTime(TimeZone.currentSystemDefault())
            val formattedTimestamp = "${local.hour.toString().padStart(2, '0')}:${local.minute.toString().padStart(2, '0')}"

            try {
                val payload = Json { ignoreUnknownKeys = true }
                    .decodeFromString<AgentPayload>(assistantText)
                chatMessages.add(
                    ChatUiMessage(
                        role = "assistant",
                        type = payload.type,
                        content = payload.content,
                        language = payload.language,
                        timestamp = formattedTimestamp,
                        confidence = payload.confidence
                    )
                )
            } catch (_: Exception) {
                chatMessages.add(ChatUiMessage("assistant", type = "assistant", content = assistantText))
            }
        }
    }
}